#!/usr/bin/env python
PACKAGE = "nmpc_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Inter-robot dependency params
gen.add("neighborGuaranteeThreshold", double_t, 0, "neighborGuaranteeThreshold", 2.0, 0 , 20) #inter-robot avoidance guarantee threshold which includes (controller error(1 m) + max distance in one trime step (0.5 m) + size of robot/2 (0.5m))

gen.add("maxOffsetUncertaintyRadius", double_t, 0, "maxOffsetUncertaintyRadius", 3.0, 0 , 20) # approx. maximum possible offset uncertainty radius of neighboring robot

gen.add("activeGuaranteeThreshold", double_t, 0, "activeGuaranteeThreshold", 1.0, 0 , 20)  # active tracking hard constraint of maintaining unequal approach angles between agents in radians

# Static obstacle avoidance params

gen.add("obstacleGuaranteeThreshold", double_t, 0, "obstacleGuaranteeThreshold", 1.5, 0 , 20) # static obstacles guarantee threshold

gen.add("approachAngleThreshold", double_t, 0, "approachAngleThreshold", 0.5, 0 , 20) # for static obstacles and local-minima avoidance in radians

#

gen.add("neighborDistThreshold",  double_t, 0, "neighborDistThreshold", 2.0,  1, 20) # (old-unused)for inter-robot avoidance

# target safety params

gen.add("distanceThresholdToTarget",  double_t, 0, "distanceThresholdToTarget", 8.0,  3, 15) # desired planar safety distance to target

gen.add("copterDesiredHeightinNED",  double_t, 0, "copterDesiredHeightinNED", -8.0,  -20.0, -2.0) # desired height from target negative due to NED coordinate system

gen.add("targetGuaranteeThreshold", double_t, 0, "targetGuaranteeThreshold", 7.0, 0 , 20) # target safety guarantee distance

# euler integration interval
gen.add("INTERNAL_SUB_STEP",  double_t, 0, "INTERNAL_SUB_STEP", 0.1,  0, 20)

gen.add("deltaT",  double_t, 0, "deltaT", 0.1,  0, 5.0)

# optimization weights
gen.add("activeTrackingWeight",  double_t, 0, "activeTrackingWeight", 100,  0, 1000)
gen.add("energyWeight",  double_t, 0, "energyWeight", 10,  0, 1000)

# control and state limits
gen.add("copterVelocityLimitHorizontal", double_t, 0, "copterVelocityLimitHorizontal", 5,  0, 10.0)
gen.add("copterVelocityLimitVertical", double_t, 0, "copterVelocityLimitVertical", 0.5,  0, 10.0)
gen.add("copterAccelarationLimitHorizontal", double_t, 0, "copterAccelarationLimitHorizontal", 5,  0, 20.0)
gen.add("copterAccelarationLimitVertical", double_t, 0, "copterAccelarationLimitVertical", 11,  0, 20.0)

exit(gen.generate(PACKAGE, "nmpc_planner", "nmpcPlannerParams"))
